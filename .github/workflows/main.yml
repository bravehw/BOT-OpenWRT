name: Openwrt Build Bot
on:
  #push:
  #  branches: main
  schedule:
    - cron: 0 0 * * 5
  workflow_dispatch:

jobs:
  buildimg:
    name: Build Openwrt Image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        #- PROFILE_NAME: x86_64
        #  PROFILE_BRANCH: openwrt-19.07
        #  PROFILE_TAG: v19.07.7
        #  DEFAULT_PROFILE: https://downloads.openwrt.org/releases/19.07.7/targets/x86/64/config.buildinfo
        #  REMOVE_FLAG: CONFIG_TARGET,CONFIG_TARGET_ALL_PROFILES
        #  DEVICE_FLAG: CONFIG_TARGET_x86=y,CONFIG_TARGET_x86_64=y,CONFIG_TARGET_x86_64_Generic=y
        #  COLLECT_FLAG: -name "openwrt*combined*img.gz"
        - PROFILE_NAME: ipq806x
          PROFILE_BRANCH: openwrt-19.07
          PROFILE_TAG: v19.07.7
          DEFAULT_PROFILE: https://downloads.openwrt.org/releases/19.07.7/targets/ipq806x/generic/config.buildinfo
          REMOVE_FLAG: CONFIG_TARGET_DEVICE,CONFIG_TARGET_ALL_PROFILES
          DEVICE_FLAG: CONFIG_TARGET_DEVICE_ipq806x_generic_DEVICE_netgear_r7800=y,CONFIG_TARGET_DEVICE_PACKAGES_ipq806x_generic_DEVICE_netgear_r7800=""
          COLLECT_FLAG: -name "*factory*" -o -name "*sysupgrade*"
        - PROFILE_NAME: ramips
          PROFILE_BRANCH: openwrt-19.07
          PROFILE_TAG: v19.07.7
          DEFAULT_PROFILE: https://downloads.openwrt.org/releases/19.07.7/targets/ramips/mt7620/config.buildinfo
          REMOVE_FLAG: CONFIG_TARGET_DEVICE,CONFIG_TARGET_ALL_PROFILES
          DEVICE_FLAG: CONFIG_TARGET_DEVICE_ramips_mt7620_DEVICE_wt3020-8M=y,CONFIG_TARGET_DEVICE_PACKAGES_ramips_mt7620_DEVICE_wt3020-8M=""
          COLLECT_FLAG: -name "*factory*" -o -name "*sysupgrade*"
        
    steps:
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get update
          #sudo -E apt install -y libev-dev libc-ares-dev libudns-dev libncurses-dev build-essential ccache ecj fastjar file g++ gawk gettext git java-propose-classpath libelf-dev libncurses5-dev libncursesw5-dev libssl-dev python2 python3 unzip wget python3-distutils python3-setuptools rsync subversion swig time xsltproc zlib1g-dev
          sudo -E apt install -y ccache gawk git libev-dev libc-ares-dev libudns-dev libncurses-dev python2 python3 python-crypto python3-distutils python3-setuptools libelf-dev libncurses5-dev libncursesw5-dev libssl-dev libev-dev libc-ares-dev libudns-dev libncurses-dev build-essential
          sudo -E apt-get -y dist-upgrade
          sudo -E apt-get clean
          
      - name: Rclone Install & Config
        run: |
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone/
          cat >  ~/.config/rclone/rclone.conf  << EOF
          ${{ secrets.RCLONE_CONF }}
          EOF
          
      - name: Sync OpenWRT git source
        env:
          PROFILE_BRANCH: ${{ matrix.PROFILE_BRANCH }}
          PROFILE_TAG: ${{ matrix.PROFILE_TAG }}
        run: |
          git clone -b $PROFILE_BRANCH https://git.openwrt.org/openwrt/openwrt.git
          cd openwrt
          git checkout $PROFILE_TAG
          
      - name: Sync addon package
        run: |
          pwd
          # Vlmcsd
          git clone -b master https://github.com/mchome/openwrt-vlmcsd openwrt/package/vlmcsd
          git clone -b master https://github.com/mchome/luci-app-vlmcsd openwrt/package/luci-app-vlmcsd
          
      - name: Update feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Initiate configuration file
        env:
          DEFAULT_PROFILE: ${{ matrix.DEFAULT_PROFILE }}
        run: |
          cd openwrt
          wget ${DEFAULT_PROFILE} -O .config
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
          echo "======================================"
          cat ./.config
          
      - name: Remove configuration
        env:
          REMOVE_FLAG: ${{ matrix.REMOVE_FLAG }}
        run: |
          cd openwrt
          removeArry=(${REMOVE_FLAG//,/ })
          for var in ${removeArry[@]}
          do
            sed -i "/${var}/d" ./.config
          done
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
          echo "======================================"
          cat ./.config
          
      - name: Device configuration
        env:
          DEVICE_FLAG: ${{ matrix.DEVICE_FLAG }}
        run: |
          cd openwrt
          deviceArry=(${DEVICE_FLAG//,/ })
          for var in ${deviceArry[@]}
          do
            echo $var >> ./.config
          done
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
          echo "======================================"
          cat ./.config
          
      - name: Add additional package to configuration file
        run: |
          cd openwrt
          # replace dnsmasq with dnsmasq-full
          # sed -i '/CONFIG_PACKAGE_dnsmasq=y/d' ./.config
          
          cat >> ./.config <<EOF
          CONFIG_PACKAGE_vlmcsd=y
          CONFIG_PACKAGE_luci-app-vlmcsd=y
          CONFIG_PACKAGE_luci-app-ddns=y
          CONFIG_PACKAGE_luci-app-upnp=y
          CONFIG_PACKAGE_luci-ssl=y
          CONFIG_PACKAGE_kmod-usb-net-rndis=y
          CONFIG_PACKAGE_kmod-usb-net=y
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_usb-modeswitch=y
          CONFIG_PACKAGE_kmod-usb-net-cdc-ether=y
          CONFIG_PACKAGE_block-mount=y
          EOF
          
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
          
      - name: Complie firmware
        run: |
          cd openwrt
          make download -j8
          echo -e "$(nproc) thread build."
          make -j$(nproc) V=s
          
      - name: Collect artifact
        env:
          COLLECT_FLAG: ${{ matrix.COLLECT_FLAG }}
        run: |
          mkdir ~/artifact
          cmd_str='find ./openwrt/bin/targets/ '$COLLECT_FLAG' | xargs -i mv -f {} ~/artifact/'
          echo $cmd_str >> collect.sh
          echo 'find ./openwrt/bin/targets/ -name "config.buildinfo" | xargs -i mv -f {} ~/artifact/' >> collect.sh
          echo 'cp ./openwrt/.config ~/artifact/' >> collect.sh
          echo 'cp collect.sh ~/artifact/' >> collect.sh
          echo "======================================"
          cat collect.sh
          echo "======================================"
          find ./openwrt/bin/targets/ -name "*"
          echo "======================================"
          sh ./collect.sh

      - name: Rclone Sync
        env:
          PROFILE_NAME: ${{ matrix.PROFILE_NAME }}
        run: |
          export CDATE=`date '+%Y%m%d'`
          #export CDATE=`date '+%Y%m%d%H%M%S'`
          #rclone mkdir TeraCLOUD:/OpenWRT/${CDATE}
          rclone copy ~/artifact TeraCLOUD:/OpenWRT/${CDATE}/${PROFILE_NAME}
